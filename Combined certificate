import ssl
import socket
import OpenSSL
import requests
import logging
import os
from datetime import datetime
from urllib.parse import urlparse
from cryptography import x509
from cryptography.hazmat.backends import default_backend

class CertificateChainExtractor:
    def __init__(self, url, output_dir='certificates'):
        self.url = self._clean_url(url)
        self.output_dir = output_dir
        self.hostname = urlparse(self.url).netloc
        self.cert_chain = []
        
        # Set up logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('certificate_extraction.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)

    def _clean_url(self, url):
        """Ensure URL has proper format"""
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
        return url

    def extract_certificate_chain(self):
        """Extract the complete certificate chain"""
        try:
            self.logger.info(f"Extracting certificate chain for {self.hostname}")
            
            # Create output directory
            os.makedirs(self.output_dir, exist_ok=True)

            # Get the certificate chain using OpenSSL
            cmd = f"openssl s_client -connect {self.hostname}:443 -showcerts"
            cert_chain = os.popen(cmd).read()
            
            # Split the certificates
            certs = cert_chain.split("-----BEGIN CERTIFICATE-----")
            
            # Process each certificate
            for i, cert in enumerate(certs[1:], 1):  # Skip the first empty split
                cert_text = "-----BEGIN CERTIFICATE-----" + cert
                cert_file = os.path.join(self.output_dir, f'cert_{i}.pem')
                
                # Save individual certificate
                with open(cert_file, 'w') as f:
                    f.write(cert_text)
                
                self.cert_chain.append(cert_file)
                
                # Parse and display certificate info
                self._display_cert_info(cert_file, i)

            # Combine certificates into a chain
            self._create_chain_file()
            
            return True

        except Exception as e:
            self.logger.error(f"Error extracting certificates: {str(e)}")
            return False

    def _display_cert_info(self, cert_file, index):
        """Display information about a certificate"""
        try:
            with open(cert_file, 'rb') as f:
                cert_data = f.read()
                cert = x509.load_pem_x509_certificate(cert_data, default_backend())
                
                self.logger.info(f"\nCertificate {index} Information:")
                self.logger.info(f"Subject: {cert.subject}")
                self.logger.info(f"Issuer: {cert.issuer}")
                self.logger.info(f"Valid From: {cert.not_valid_before}")
                self.logger.info(f"Valid Until: {cert.not_valid_after}")
                self.logger.info(f"Serial Number: {cert.serial_number}")
                
                # Check if certificate is self-signed
                is_self_signed = cert.issuer == cert.subject
                self.logger.info(f"Self-signed: {is_self_signed}")

        except Exception as e:
            self.logger.error(f"Error displaying certificate info: {str(e)}")

    def _create_chain_file(self):
        """Combine all certificates into a single chain file"""
        chain_file = os.path.join(self.output_dir, 'certificate_chain.pem')
        
        try:
            with open(chain_file, 'w') as chain:
                for cert_file in self.cert_chain:
                    with open(cert_file, 'r') as cert:
                        chain.write(cert.read())
            
            self.logger.info(f"\nCertificate chain saved to: {chain_file}")
            
            # Verify the chain
            self._verify_chain(chain_file)
            
            return chain_file

        except Exception as e:
            self.logger.error(f"Error creating chain file: {str(e)}")
            return None

    def _verify_chain(self, chain_file):
        """Verify the certificate chain"""
        try:
            # Load the certificate chain
            with open(chain_file, 'rb') as f:
                cert_data = f.read()
            
            # Create a certificate store
            store = OpenSSL.crypto.X509Store()
            
            # Load all certificates into the store
            certs = []
            for cert_file in self.cert_chain:
                with open(cert_file, 'rb') as f:
                    cert_data = f.read()
                    cert = OpenSSL.crypto.load_certificate(
                        OpenSSL.crypto.FILETYPE_PEM, cert_data
                    )
                    certs.append(cert)
                    store.add_cert(cert)

            # Verify each certificate in the chain
            for i, cert in enumerate(certs):
                store_ctx = OpenSSL.crypto.X509StoreContext(store, cert)
                try:
                    store_ctx.verify_certificate()
                    self.logger.info(f"Certificate {i+1} successfully verified")
                except Exception as e:
                    self.logger.warning(f"Certificate {i+1} verification failed: {str(e)}")

        except Exception as e:
            self.logger.error(f"Error verifying certificate chain: {str(e)}")

    def test_connection(self):
        """Test connection using the generated certificate chain"""
        chain_file = os.path.join(self.output_dir, 'certificate_chain.pem')
        
        try:
            response = requests.get(self.url, verify=chain_file)
            self.logger.info(f"\nConnection test successful: {response.status_code}")
            return True
        except requests.exceptions.SSLError as e:
            self.logger.error(f"SSL Error during connection test: {str(e)}")
            return False
        except Exception as e:
            self.logger.error(f"Error testing connection: {str(e)}")
            return False

def main():
    print("Certificate Chain Extractor")
    print("==========================")
    
    url = input("\nEnter your JIRA URL (e.g., your-domain.atlassian.net): ").strip()
    
    extractor = CertificateChainExtractor(url)
    
    if extractor.extract_certificate_chain():
        print("\nCertificate chain extraction complete!")
        print("\nYou can now use this configuration in your JIRA server:")
        print("\nJIRA_CONFIG = {")
        print(f"    'base_url': '{extractor.url}',")
        print("    'email': 'your-email@domain.com',")
        print("    'api_token': 'your-api-token',")
        print(f"    'verify_ssl': r'{os.path.abspath(os.path.join(extractor.output_dir, 'certificate_chain.pem'))}'")
        print("}")
        
        # Test the connection
        print("\nTesting connection with the certificate chain...")
        extractor.test_connection()
    
    print("\nCheck certificate_extraction.log for detailed information")
    input("\nPress Enter to exit...")

if __name__ == "__main__":
    main()
