<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JIRA Summary Dashboard</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
    <style>
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }
        .modal-content {
            background-color: white;
            margin: 15% auto;
            padding: 20px;
            width: 80%;
            max-width: 1000px;
            border-radius: 8px;
            position: relative;
            max-height: 70vh;
            overflow-y: auto;
        }
        .close {
            position: absolute;
            right: 20px;
            top: 10px;
            font-size: 28px;
            cursor: pointer;
        }
        .loading {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.3);
            z-index: 2000;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 4px;
            color: white;
            z-index: 3000;
            display: none;
        }
        .success { background-color: #10B981; }
        .error { background-color: #EF4444; }
        .badge {
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.875rem;
            font-weight: 500;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <!-- Loading Spinner -->
    <div id="loading" class="loading">
        <div class="bg-white p-4 rounded-lg shadow-lg flex items-center space-x-3">
            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-indigo-600"></div>
            <span>Loading...</span>
        </div>
    </div>

    <!-- Notification -->
    <div id="notification" class="notification"></div>

    <div class="container mx-auto px-4 py-8">
        <!-- Main Header -->
        <div class="text-center mb-10">
            <h1 class="text-4xl font-bold text-indigo-600 mb-4">JIRA Summary Dashboard</h1>
            <p class="text-gray-600">Track and manage your JIRA issues efficiently</p>
        </div>

        <!-- Main Dashboard Section -->
        <div class="bg-white rounded-lg shadow-lg p-6">
            <!-- Statistics Cards -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
                <div class="bg-blue-100 p-4 rounded-lg">
                    <h3 class="text-blue-800 font-semibold">Total Issues</h3>
                    <p id="totalIssues" class="text-2xl font-bold">-</p>
                </div>
                <div class="bg-green-100 p-4 rounded-lg">
                    <h3 class="text-green-800 font-semibold">Open Issues</h3>
                    <p id="openIssues" class="text-2xl font-bold">-</p>
                </div>
                <div class="bg-yellow-100 p-4 rounded-lg">
                    <h3 class="text-yellow-800 font-semibold">Critical Issues</h3>
                    <p id="criticalIssues" class="text-2xl font-bold">-</p>
                </div>
                <div class="bg-purple-100 p-4 rounded-lg">
                    <h3 class="text-purple-800 font-semibold">My Assigned Issues</h3>
                    <p id="assignedIssues" class="text-2xl font-bold">-</p>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="space-y-4">
                <button id="showUserIssuesBtn" class="w-full bg-indigo-600 text-white py-3 rounded-lg hover:bg-indigo-700 transition duration-300 flex items-center justify-center space-x-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                    <span>View Issues Raised by Users</span>
                </button>

                <button id="showAssignedIssuesBtn" class="w-full bg-purple-600 text-white py-3 rounded-lg hover:bg-purple-700 transition duration-300 flex items-center justify-center space-x-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                    <span>View Assigned Issues</span>
                </button>
            </div>
        </div>
    </div>

    <!-- User Issues Modal -->
    <div id="userIssuesModal" class="modal">
        <div class="modal-content">
            <span class="close" data-modal="userIssuesModal">&times;</span>
            <h2 class="text-2xl font-bold mb-4">Issues Raised by Users</h2>
            
            <div class="mb-4 flex space-x-4">
                <div class="flex-1">
                    <label class="block text-gray-700 mb-2">Filter by Status:</label>
                    <select id="userIssuesStatusFilter" class="w-full p-2 border rounded-lg">
                        <option value="all">All Status</option>
                    </select>
                </div>
                <div class="flex-1">
                    <label class="block text-gray-700 mb-2">Search by Title:</label>
                    <input type="text" id="userIssuesSearch" placeholder="Search issues..." 
                           class="w-full p-2 border rounded-lg">
                </div>
            </div>

            <div class="overflow-x-auto">
                <table class="min-w-full bg-white">
                    <thead class="bg-gray-100">
                        <tr>
                            <th class="py-2 px-4 border">Issue ID</th>
                            <th class="py-2 px-4 border">Title</th>
                            <th class="py-2 px-4 border">Status</th>
                            <th class="py-2 px-4 border">Priority</th>
                            <th class="py-2 px-4 border">Created Date</th>
                            <th class="py-2 px-4 border">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="userIssuesTable"></tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Assigned Issues Modal -->
    <div id="assignedIssuesModal" class="modal">
        <div class="modal-content">
            <span class="close" data-modal="assignedIssuesModal">&times;</span>
            <h2 class="text-2xl font-bold mb-4">Issues Assigned to You</h2>
            
            <div class="mb-4 flex space-x-4">
                <div class="flex-1">
                    <label class="block text-gray-700 mb-2">Filter by Status:</label>
                    <select id="assignedIssuesStatusFilter" class="w-full p-2 border rounded-lg">
                        <option value="all">All Status</option>
                    </select>
                </div>
                <div class="flex-1">
                    <label class="block text-gray-700 mb-2">Filter by Priority:</label>
                    <select id="assignedIssuesPriorityFilter" class="w-full p-2 border rounded-lg">
                        <option value="all">All Priorities</option>
                    </select>
                </div>
            </div>

            <div class="overflow-x-auto">
                <table class="min-w-full bg-white">
                    <thead class="bg-gray-100">
                        <tr>
                            <th class="py-2 px-4 border">Issue ID</th>
                            <th class="py-2 px-4 border">Title</th>
                            <th class="py-2 px-4 border">Status</th>
                            <th class="py-2 px-4 border">Priority</th>
                            <th class="py-2 px-4 border">Due Date</th>
                            <th class="py-2 px-4 border">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="assignedIssuesTable"></tbody>
                </table>
            </div>
        </div>
    </div>

</body>
</html>
<script>
// JIRA API Configuration
const JIRA_CONFIG = {
    baseUrl: 'https://your-domain.atlassian.net', // Replace with your JIRA domain
    email: 'your-email@domain.com', // Replace with your email
    apiToken: 'your-api-token' // Replace with your API token
};

// JIRA API Class
class JiraAPI {
    constructor(config) {
        this.config = config;
        this.baseUrl = config.baseUrl;
        this.headers = {
            'Authorization': `Basic ${btoa(`${config.email}:${config.apiToken}`)}`,
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        };
    }

    async makeRequest(endpoint, method = 'GET', body = null) {
        try {
            const url = `${this.baseUrl}/rest/api/3/${endpoint}`;
            const options = {
                method,
                headers: this.headers,
                credentials: 'include'
            };

            if (body) {
                options.body = JSON.stringify(body);
            }

            const response = await fetch(url, options);
            
            if (!response.ok) {
                throw new Error(`JIRA API Error: ${response.statusText}`);
            }

            return await response.json();
        } catch (error) {
            console.error('JIRA API Request Error:', error);
            showNotification(error.message, true);
            throw error;
        }
    }

    async searchIssues(jql) {
        return this.makeRequest(`search?jql=${encodeURIComponent(jql)}`);
    }

    async getTransitions(issueKey) {
        return this.makeRequest(`issue/${issueKey}/transitions`);
    }

    async transitionIssue(issueKey, transitionId) {
        return this.makeRequest(`issue/${issueKey}/transitions`, 'POST', {
            transition: { id: transitionId }
        });
    }

    async updatePriority(issueKey, priorityId) {
        return this.makeRequest(`issue/${issueKey}`, 'PUT', {
            fields: {
                priority: { id: priorityId }
            }
        });
    }
}

// Initialize JIRA API
const jiraApi = new JiraAPI(JIRA_CONFIG);

// Data Store
let dashboardData = {
    userIssues: [],
    assignedIssues: [],
    statuses: new Set(),
    priorities: new Set()
};

// UI Helper Functions
function showLoading() {
    document.getElementById('loading').style.display = 'flex';
}

function hideLoading() {
    document.getElementById('loading').style.display = 'none';
}

function showNotification(message, isError = false) {
    const notification = document.getElementById('notification');
    notification.textContent = message;
    notification.className = `notification ${isError ? 'error' : 'success'}`;
    notification.style.display = 'block';

    setTimeout(() => {
        notification.style.display = 'none';
    }, 3000);
}

function showModal(modalId) {
    document.getElementById(modalId).style.display = 'block';
}

function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

// Status and Priority Styling
function getStatusColor(status) {
    const colors = {
        'To Do': 'bg-gray-100 text-gray-800',
        'In Progress': 'bg-blue-100 text-blue-800',
        'Done': 'bg-green-100 text-green-800',
        'Blocked': 'bg-red-100 text-red-800'
    };
    return colors[status] || 'bg-gray-100 text-gray-800';
}

function getPriorityColor(priority) {
    const colors = {
        'Highest': 'bg-red-100 text-red-800',
        'High': 'bg-orange-100 text-orange-800',
        'Medium': 'bg-yellow-100 text-yellow-800',
        'Low': 'bg-green-100 text-green-800',
        'Lowest': 'bg-blue-100 text-blue-800'
    };
    return colors[priority] || 'bg-gray-100 text-gray-800';
}

// Data Fetching Functions
async function fetchUserIssues() {
    try {
        const jql = 'reporter = currentUser() ORDER BY created DESC';
        const response = await jiraApi.searchIssues(jql);
        dashboardData.userIssues = response.issues;
        updateStatusesAndPriorities(response.issues);
        return response.issues;
    } catch (error) {
        console.error('Error fetching user issues:', error);
        showNotification('Error fetching user issues', true);
        return [];
    }
}

async function fetchAssignedIssues() {
    try {
        const jql = 'assignee = currentUser() ORDER BY updated DESC';
        const response = await jiraApi.searchIssues(jql);
        dashboardData.assignedIssues = response.issues;
        updateStatusesAndPriorities(response.issues);
        return response.issues;
    } catch (error) {
        console.error('Error fetching assigned issues:', error);
        showNotification('Error fetching assigned issues', true);
        return [];
    }
}

function updateStatusesAndPriorities(issues) {
    issues.forEach(issue => {
        dashboardData.statuses.add(issue.fields.status.name);
        dashboardData.priorities.add(issue.fields.priority.name);
    });
    updateFilterDropdowns();
}

// Update Filter Dropdowns
function updateFilterDropdowns() {
    const statusFilters = [
        document.getElementById('userIssuesStatusFilter'),
        document.getElementById('assignedIssuesStatusFilter')
    ];
    const priorityFilter = document.getElementById('assignedIssuesPriorityFilter');

    // Update status dropdowns
    const statusOptions = ['all', ...Array.from(dashboardData.statuses)];
    statusFilters.forEach(filter => {
        filter.innerHTML = statusOptions.map(status => 
            `<option value="${status}">${status === 'all' ? 'All Status' : status}</option>`
        ).join('');
    });

    // Update priority dropdown
    const priorityOptions = ['all', ...Array.from(dashboardData.priorities)];
    priorityFilter.innerHTML = priorityOptions.map(priority =>
        `<option value="${priority}">${priority === 'all' ? 'All Priorities' : priority}</option>`
    ).join('');
}

// Table Update Functions
function updateUserIssuesTable() {
    const statusFilter = document.getElementById('userIssuesStatusFilter').value;
    const searchTerm = document.getElementById('userIssuesSearch').value.toLowerCase();
    
    const filteredIssues = dashboardData.userIssues.filter(issue => {
        const matchesStatus = statusFilter === 'all' || issue.fields.status.name === statusFilter;
        const matchesSearch = issue.fields.summary.toLowerCase().includes(searchTerm) ||
                            issue.key.toLowerCase().includes(searchTerm);
        return matchesStatus && matchesSearch;
    });

    const tbody = document.getElementById('userIssuesTable');
    tbody.innerHTML = filteredIssues.map(issue => `
        <tr>
            <td class="py-2 px-4 border">${issue.key}</td>
            <td class="py-2 px-4 border">${issue.fields.summary}</td>
            <td class="py-2 px-4 border">
                <span class="badge ${getStatusColor(issue.fields.status.name)}">
                    ${issue.fields.status.name}
                </span>
            </td>
            <td class="py-2 px-4 border">
                <span class="badge ${getPriorityColor(issue.fields.priority.name)}">
                    ${issue.fields.priority.name}
                </span>
            </td>
            <td class="py-2 px-4 border">
                ${new Date(issue.fields.created).toLocaleDateString()}
            </td>
            <td class="py-2 px-4 border">
                <button onclick="updateIssueStatus('${issue.key}')" 
                        class="bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600 text-sm">
                    Update Status
                </button>
            </td>
        </tr>
    `).join('');
}

function updateAssignedIssuesTable() {
    const statusFilter = document.getElementById('assignedIssuesStatusFilter').value;
    const priorityFilter = document.getElementById('assignedIssuesPriorityFilter').value;
    
    const filteredIssues = dashboardData.assignedIssues.filter(issue => {
        const matchesStatus = statusFilter === 'all' || issue.fields.status.name === statusFilter;
        const matchesPriority = priorityFilter === 'all' || issue.fields.priority.name === priorityFilter;
        return matchesStatus && matchesPriority;
    });

    const tbody = document.getElementById('assignedIssuesTable');
    tbody.innerHTML = filteredIssues.map(issue => `
        <tr>
            <td class="py-2 px-4 border">${issue.key}</td>
            <td class="py-2 px-4 border">${issue.fields.summary}</td>
            <td class="py-2 px-4 border">
                <span class="badge ${getStatusColor(issue.fields.status.name)}">
                    ${issue.fields.status.name}
                </span>
            </td>
            <td class="py-2 px-4 border">
                <span class="badge ${getPriorityColor(issue.fields.priority.name)}">
                    ${issue.fields.priority.name}
                </span>
            </td>
            <td class="py-2 px-4 border">
                ${issue.fields.duedate ? new Date(issue.fields.duedate).toLocaleDateString() : 'No due date'}
            </td>
            <td class="py-2 px-4 border">
                <div class="flex space-x-2">
                    <button onclick="updateIssueStatus('${issue.key}')" 
                            class="bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600 text-sm">
                        Update Status
                    </button>
                    <button onclick="updateIssuePriority('${issue.key}')" 
                            class="bg-yellow-500 text-white px-2 py-1 rounded hover:bg-yellow-600 text-sm">
                        Update Priority
                    </button>
                </div>
            </td>
        </tr>
    `).join('');
}

// Update Issue Functions
async function updateIssueStatus(issueKey) {
    try {
        showLoading();
        const transitions = await jiraApi.getTransitions(issueKey);
        const nextTransition = transitions.transitions[0];
        
        if (nextTransition) {
            await jiraApi.transitionIssue(issueKey, nextTransition.id);
            await refreshDashboard();
            showNotification(`Status updated for ${issueKey}`);
        } else {
            showNotification('No available status transitions', true);
        }
    } catch (error) {
        console.error('Error updating status:', error);
        showNotification('Error updating status', true);
    } finally {
        hideLoading();
    }
}

async function updateIssuePriority(issueKey) {
    try {
        showLoading();
        const priorities = ['1', '2', '3', '4', '5']; // Priority IDs in JIRA
        const issue = dashboardData.assignedIssues.find(i => i.key === issueKey);
        const currentPriorityId = issue.fields.priority.id;
        const currentIndex = priorities.indexOf(currentPriorityId);
        const nextPriorityId = priorities[(currentIndex + 1) % priorities.length];
        
        await jiraApi.updatePriority(issueKey, nextPriorityId);
        await refreshDashboard();
        showNotification(`Priority updated for ${issueKey}`);
    } catch (error) {
        console.error('Error updating priority:', error);
        showNotification('Error updating priority', true);
    } finally {
        hideLoading();
    }
}

// Dashboard Initialization and Refresh
async function refreshDashboard() {
    await Promise.all([
        fetchUserIssues(),
        fetchAssignedIssues()
    ]);
    updateUserIssuesTable();
    updateAssignedIssuesTable();
    updateDashboardStats();
}

function updateDashboardStats() {
    const stats = {
        total: dashboardData.userIssues.length + dashboardData.assignedIssues.length,
        open: [...dashboardData.userIssues, ...dashboardData.assignedIssues]
            .filter(issue => issue.fields.status.name !== 'Done').length,
        critical: [...dashboardData.userIssues, ...dashboardData.assignedIssues]
            .filter(issue => issue.fields.priority.name === 'Highest').length,
        assigned: dashboardData.assignedIssues.length
    };

    document.getElementById('totalIssues').textContent = stats.total;
    document.getElementById('openIssues').textContent = stats.open;
    document.getElementById('criticalIssues').textContent = stats.critical;
    document.getElementById('assignedIssues').textContent = stats.assigned;
}

// Event Listeners
document.addEventListener('DOMContentLoaded', function() {
    // Initialize buttons
    document.getElementById('showUserIssuesBtn').addEventListener('click', () => {
        showModal('userIssuesModal');
        updateUserIssuesTable();
    });
    
    document.getElementById('showAssignedIssuesBtn').addEventListener('click', () => {
        showModal('assignedIssuesModal');
        updateAssignedIssuesTable();
    });

    // Initialize close buttons
    document.querySelectorAll('.close').forEach(button => {
        button.addEventListener('click', () => {
            closeModal(button.getAttribute('data-modal'));
        });
    });

    // Initialize filters
    document.getElementById('userIssuesStatusFilter').addEventListener('change', updateUserIssuesTable);
    document.getElementById('userIssuesSearch').addEventListener('input', updateUserIssuesTable);
    document.getElementById('assignedIssuesStatusFilter').addEventListener('change', updateAssignedIssuesTable);
    document.getElementById('assignedIssuesPriorityFilter').addEventListener('change', updateAssignedIssuesTable);

    // Click outside modal to close
    window.addEventListener('click', function(event) {
        if (event.target.classList.contains('modal')) {
            event.target.style.display = 'none';
        }
    });

    // Initialize dashboard
    refreshDashboard();
});
</script>
</artifact>
