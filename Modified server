import sys
import os

# Add your Anaconda lib path (modify this path according to your Anaconda installation)
anaconda_lib = r"C:\Users\YourUsername\Anaconda3\Lib"
anaconda_site_packages = r"C:\Users\YourUsername\Anaconda3\Lib\site-packages"

# Add paths to system path if they're not already there
if anaconda_lib not in sys.path:
    sys.path.append(anaconda_lib)
if anaconda_site_packages not in sys.path:
    sys.path.append(anaconda_site_packages)

# Now import the required packages
from http.server import HTTPServer, SimpleHTTPRequestHandler
from urllib.parse import parse_qs, urlparse
import json
import requests  # This will now use the requests from Anaconda
import base64
import os
from datetime import datetime
import csv

# Print debug information
print("Python Version:", sys.version)
print("Python Path:", sys.executable)
print("System Paths:", "\n".join(sys.path))

# JIRA Configuration
JIRA_CONFIG = {
    'base_url': 'https://your-domain.atlassian.net',
    'email': 'your-email@domain.com',
    'api_token': 'your-api-token'
}

class JiraProxyHandler(SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.jira_auth = base64.b64encode(
            f"{JIRA_CONFIG['email']}:{JIRA_CONFIG['api_token']}".encode()
        ).decode()

    def do_OPTIONS(self):
        self.send_cors_headers()
        self.send_response(200)
        self.end_headers()

    def do_GET(self):
        try:
            # Serve static files (HTML, CSS, JS)
            if not self.path.startswith('/api/'):
                return super().do_GET()
            
            # Handle API requests
            parsed_path = urlparse(self.path)
            if parsed_path.path.startswith('/api/jira/'):
                self.handle_jira_request(parsed_path)
            else:
                self.send_error(404, "API endpoint not found")
        except Exception as e:
            print("Error in do_GET:", str(e))  # Debug print
            self.send_error(500, str(e))

    def handle_jira_request(self, parsed_path):
        try:
            # Remove /api/jira prefix
            jira_path = parsed_path.path.replace('/api/jira/', '')
            query_params = parse_qs(parsed_path.query)

            # Make request to JIRA
            headers = {
                'Authorization': f'Basic {self.jira_auth}',
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }

            # Construct JIRA URL
            jira_url = f"{JIRA_CONFIG['base_url']}/rest/api/3/{jira_path}"
            
            print(f"Making request to: {jira_url}")  # Debug print
            
            if query_params:
                # Convert query params to JIRA format
                formatted_params = {k: v[0] for k, v in query_params.items()}
                response = requests.get(jira_url, headers=headers, params=formatted_params)
            else:
                response = requests.get(jira_url, headers=headers)

            # Send response back to client
            self.send_cors_headers()
            self.send_response(response.status_code)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(response.content)

            # Save response to CSV if it's an issue query
            if jira_path == 'search':
                self.save_issues_to_csv(response.json())

        except Exception as e:
            print("Error in handle_jira_request:", str(e))  # Debug print
            self.send_error(500, str(e))

    def write_csv(self, filename, data):
        if not data:
            return

        try:
            with open(filename, 'w', newline='', encoding='utf-8') as f:
                if data:
                    # Get headers from first row
                    headers = list(data[0].keys())
                    
                    # Create CSV writer
                    writer = csv.DictWriter(f, fieldnames=headers, quoting=csv.QUOTE_ALL)
                    
                    # Write headers and data
                    writer.writeheader()
                    writer.writerows(data)
        except Exception as e:
            print(f"Error writing CSV {filename}:", str(e))  # Debug print

    def save_issues_to_csv(self, data):
        try:
            if 'issues' not in data:
                return

            # Ensure data directory exists
            os.makedirs('data', exist_ok=True)

            # Process issues and save to appropriate CSV files
            user_issues = []
            assigned_issues = []

            for issue in data['issues']:
                fields = issue['fields']
                issue_data = {
                    'Key': issue['key'],
                    'Summary': fields['summary'],
                    'Status': fields['status']['name'],
                    'Priority': fields['priority']['name'],
                    'Created': fields['created'],
                    'DueDate': fields.get('duedate', ''),
                    'Reporter': fields['reporter']['displayName'],
                    'Assignee': fields.get('assignee', {}).get('displayName', '')
                }

                if fields['reporter']['emailAddress'] == JIRA_CONFIG['email']:
                    user_issues.append(issue_data)
                if fields.get('assignee', {}).get('emailAddress') == JIRA_CONFIG['email']:
                    assigned_issues.append(issue_data)

            self.write_csv('data/user_issues.csv', user_issues)
            self.write_csv('data/assigned_issues.csv', assigned_issues)
            
            metadata = [{
                'LastUpdated': datetime.now().isoformat(),
                'RecordCount': str(len(user_issues) + len(assigned_issues))
            }]
            self.write_csv('data/metadata.csv', metadata)

        except Exception as e:
            print("Error in save_issues_to_csv:", str(e))  # Debug print

    def send_cors_headers(self):
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
        self.send_header('Cache-Control', 'no-store, no-cache, must-revalidate')

def find_anaconda_path():
    """Try to automatically find Anaconda installation path"""
    possible_paths = [
        os.environ.get('CONDA_PREFIX'),
        r"C:\Users\%s\Anaconda3" % os.getenv('USERNAME'),
        r"C:\ProgramData\Anaconda3",
        os.path.join(os.path.expanduser('~'), 'anaconda3'),
        os.path.join(os.path.expanduser('~'), 'Anaconda3')
    ]
    
    for path in possible_paths:
        if path and os.path.exists(path):
            return path
    return None

def run_server(port=8000):
    server_address = ('', port)
    httpd = HTTPServer(server_address, JiraProxyHandler)
    print(f'Starting server on port {port}...')
    print(f'Access the dashboard at http://localhost:{port}')
    httpd.serve_forever()

if __name__ == '__main__':
    # Try to find Anaconda path
    anaconda_path = find_anaconda_path()
    if anaconda_path:
        print(f"Found Anaconda at: {anaconda_path}")
    else:
        print("Warning: Could not find Anaconda installation")

    # Print available packages
    print("\nAvailable Packages:")
    print("requests" if "requests" in sys.modules else "requests not found")
    
    try:
        run_server()
    except Exception as e:
        print(f"Server error: {str(e)}")
        input("Press Enter to exit...")
