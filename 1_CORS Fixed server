from http.server import HTTPServer, SimpleHTTPRequestHandler
from urllib.parse import parse_qs, urlparse
import json
import requests
import logging
import os
from datetime import datetime
import traceback
import urllib3

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Set up logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('jira_server.log'),
        logging.StreamHandler()
    ]
)

# JIRA Configuration
JIRA_CONFIG = {
    'base_url': 'https://your-domain.atlassian.net',  # Replace with your JIRA URL
    'api_key': 'your-api-key',                        # Replace with your API key
    'email': 'your-email@domain.com',                 # Replace with your email
    'verify_ssl': False                               # Set to certificate path if needed
}

class CORSRequestHandler(SimpleHTTPRequestHandler):
    def end_headers(self):
        self.send_cors_headers()
        super().end_headers()

    def send_cors_headers(self):
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization, Accept')
        self.send_header('Access-Control-Max-Age', '3600')
        self.send_header('Access-Control-Allow-Credentials', 'true')

class JiraProxyHandler(CORSRequestHandler):
    def __init__(self, *args, **kwargs):
        self.jira_headers = {
            'Authorization': f'Bearer {JIRA_CONFIG["api_key"]}',
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
        super().__init__(*args, **kwargs)

    def do_OPTIONS(self):
        self.send_response(200)
        self.end_headers()

    def do_GET(self):
        try:
            logging.info(f"Received GET request for path: {self.path}")
            logging.info(f"Request headers: {dict(self.headers)}")
            
            # Serve static files
            if not self.path.startswith('/api/'):
                return super().do_GET()
            
            # Handle API requests
            parsed_path = urlparse(self.path)
            if parsed_path.path.startswith('/api/jira/'):
                self.handle_jira_request(parsed_path)
            else:
                self.send_error(404, "API endpoint not found")

        except Exception as e:
            logging.error(f"Error in GET: {str(e)}\n{traceback.format_exc()}")
            self.send_error(500, f"Internal server error: {str(e)}")

    def handle_jira_request(self, parsed_path):
        try:
            # Remove /api/jira prefix
            jira_path = parsed_path.path.replace('/api/jira/', '')
            query_params = parse_qs(parsed_path.query)
            
            logging.info(f"Processing JIRA request for: {jira_path}")

            # Handle root endpoint
            if not jira_path:
                response_data = {
                    "status": "ok",
                    "message": "JIRA API proxy is running",
                    "endpoints": [
                        "/api/jira/myself",
                        "/api/jira/search",
                        "/api/jira/project"
                    ]
                }
                self.send_json_response(response_data)
                return

            # Construct JIRA URL
            jira_url = f"{JIRA_CONFIG['base_url']}/jira/rest/api/2/{jira_path}"
            logging.info(f"Making request to JIRA: {jira_url}")

            # Make request to JIRA
            if query_params:
                formatted_params = {k: v[0] for k, v in query_params.items()}
                response = requests.get(
                    jira_url, 
                    headers=self.jira_headers,
                    params=formatted_params,
                    verify=JIRA_CONFIG['verify_ssl']
                )
            else:
                response = requests.get(
                    jira_url, 
                    headers=self.jira_headers,
                    verify=JIRA_CONFIG['verify_ssl']
                )

            logging.info(f"JIRA response status: {response.status_code}")
            
            # Log response for debugging
            logging.debug(f"JIRA response headers: {dict(response.headers)}")
            logging.debug(f"JIRA response content: {response.text[:200]}...")  # First 200 chars

            if response.ok:
                self.send_json_response(response.json())
            else:
                error_data = {
                    "error": "JIRA API Error",
                    "status": response.status_code,
                    "message": response.text
                }
                self.send_json_response(error_data, status_code=response.status_code)

        except Exception as e:
            logging.error(f"Error handling JIRA request: {str(e)}\n{traceback.format_exc()}")
            error_data = {
                "error": "Server Error",
                "message": str(e)
            }
            self.send_json_response(error_data, status_code=500)

    def send_json_response(self, data, status_code=200):
        """Send JSON response with proper headers"""
        try:
            response_data = json.dumps(data, indent=2)
            response_bytes = response_data.encode('utf-8')

            self.send_response(status_code)
            self.send_header('Content-Type', 'application/json; charset=utf-8')
            self.send_header('Content-Length', str(len(response_bytes)))
            self.end_headers()
            
            self.wfile.write(response_bytes)
            
        except Exception as e:
            logging.error(f"Error sending response: {str(e)}")
            self.send_error(500, f"Error sending response: {str(e)}")

def test_jira_connection():
    """Test JIRA connection before starting server"""
    try:
        headers = {
            'Authorization': f'Bearer {JIRA_CONFIG["api_key"]}',
            'Accept': 'application/json'
        }
        
        test_url = f"{JIRA_CONFIG['base_url']}/jira/rest/api/2/myself"
        logging.info(f"Testing connection to: {test_url}")
        
        response = requests.get(
            test_url,
            headers=headers,
            verify=JIRA_CONFIG['verify_ssl']
        )
        
        if response.ok:
            user_data = response.json()
            logging.info(f"Successfully connected as: {user_data.get('displayName', 'Unknown')}")
            print(f"Connected to JIRA as: {user_data.get('displayName', 'Unknown')}")
            return True
        else:
            logging.error(f"Failed to connect: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        logging.error(f"Connection test error: {str(e)}")
        return False

def run_server(port=8000):
    server_address = ('', port)
    httpd = HTTPServer(server_address, JiraProxyHandler)
    print(f'Starting server on port {port}...')
    print(f'Access the dashboard at http://localhost:{port}')
    httpd.serve_forever()

if __name__ == '__main__':
    try:
        print("\nJIRA Server Starting...")
        print(f"Base URL: {JIRA_CONFIG['base_url']}")
        print("Testing connection...")
        
        if test_jira_connection():
            print("\nConnection successful! Starting server...")
            run_server()
        else:
            print("\nFailed to connect to JIRA. Check configuration.")
            print("See jira_server.log for details")
    except KeyboardInterrupt:
        print("\nServer stopped by user")
    except Exception as e:
        logging.error(f"Server error: {str(e)}\n{traceback.format_exc()}")
        print("\nError occurred. Check jira_server.log for details")
    
    input("\nPress Enter to exit...")
