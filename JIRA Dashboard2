<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JIRA Summary Dashboard</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.css" rel="stylesheet">
    <style>
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }
        .modal-content {
            background-color: white;
            margin: 15% auto;
            padding: 20px;
            width: 80%;
            border-radius: 8px;
            position: relative;
            max-height: 70vh;
            overflow-y: auto;
        }
        .close {
            position: absolute;
            right: 20px;
            top: 10px;
            font-size: 28px;
            cursor: pointer;
        }
        .loading {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            z-index: 1000;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <!-- Loading Spinner -->
    <div id="loading" class="loading">
        <div class="flex items-center space-x-2">
            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-indigo-600"></div>
            <span>Loading...</span>
        </div>
    </div>

    <div class="container mx-auto px-4 py-8">
        <!-- Main Header -->
        <div class="text-center mb-10">
            <h1 class="text-4xl font-bold text-indigo-600 mb-4">JIRA Summary Dashboard</h1>
            <p class="text-gray-600">Track and manage your JIRA issues efficiently</p>
        </div>

        <!-- Main Dashboard Section -->
        <div class="bg-white rounded-lg shadow-lg p-6">
            <!-- Statistics Cards -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
                <div class="bg-blue-100 p-4 rounded-lg">
                    <h3 class="text-blue-800 font-semibold">Total Issues</h3>
                    <p id="totalIssues" class="text-2xl font-bold">-</p>
                </div>
                <div class="bg-green-100 p-4 rounded-lg">
                    <h3 class="text-green-800 font-semibold">Open Issues</h3>
                    <p id="openIssues" class="text-2xl font-bold">-</p>
                </div>
                <div class="bg-yellow-100 p-4 rounded-lg">
                    <h3 class="text-yellow-800 font-semibold">Critical Issues</h3>
                    <p id="criticalIssues" class="text-2xl font-bold">-</p>
                </div>
                <div class="bg-purple-100 p-4 rounded-lg">
                    <h3 class="text-purple-800 font-semibold">My Assigned Issues</h3>
                    <p id="assignedIssues" class="text-2xl font-bold">-</p>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="space-y-4">
                <button onclick="showUserIssuesModal()" class="w-full bg-indigo-600 text-white py-3 rounded-lg hover:bg-indigo-700 transition duration-300 flex items-center justify-center space-x-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                    <span>View Issues Raised by Users</span>
                </button>

                <button onclick="showAssignedIssuesModal()" class="w-full bg-purple-600 text-white py-3 rounded-lg hover:bg-purple-700 transition duration-300 flex items-center justify-center space-x-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                    <span>View Assigned Issues</span>
                </button>
            </div>
        </div>
    </div>

    <!-- User Issues Modal -->
    <div id="userIssuesModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('userIssuesModal')">&times;</span>
            <h2 class="text-2xl font-bold mb-4">Issues Raised by Users</h2>
            
            <div class="mb-4 flex space-x-4">
                <div class="flex-1">
                    <label class="block text-gray-700 mb-2">Filter by Status:</label>
                    <select id="userIssuesStatusFilter" onchange="filterUserIssues()" class="w-full p-2 border rounded-lg">
                        <option value="all">All Status</option>
                        <option value="Open">Open</option>
                        <option value="In Progress">In Progress</option>
                        <option value="Resolved">Resolved</option>
                        <option value="Closed">Closed</option>
                    </select>
                </div>
                <div class="flex-1">
                    <label class="block text-gray-700 mb-2">Search by Title:</label>
                    <input type="text" id="userIssuesSearch" onkeyup="filterUserIssues()" placeholder="Search issues..." class="w-full p-2 border rounded-lg">
                </div>
            </div>

            <div class="overflow-x-auto">
                <table class="min-w-full bg-white">
                    <thead class="bg-gray-100">
                        <tr>
                            <th class="py-2 px-4 border">Issue ID</th>
                            <th class="py-2 px-4 border">Title</th>
                            <th class="py-2 px-4 border">Status</th>
                            <th class="py-2 px-4 border">Priority</th>
                            <th class="py-2 px-4 border">Created Date</th>
                            <th class="py-2 px-4 border">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="userIssuesTable"></tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Assigned Issues Modal -->
    <div id="assignedIssuesModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('assignedIssuesModal')">&times;</span>
            <h2 class="text-2xl font-bold mb-4">Issues Assigned to You</h2>
            
            <div class="mb-4 flex space-x-4">
                <div class="flex-1">
                    <label class="block text-gray-700 mb-2">Filter by Status:</label>
                    <select id="assignedIssuesStatusFilter" onchange="filterAssignedIssues()" class="w-full p-2 border rounded-lg">
                        <option value="all">All Status</option>
                        <option value="Open">Open</option>
                        <option value="In Progress">In Progress</option>
                        <option value="Resolved">Resolved</option>
                        <option value="Closed">Closed</option>
                    </select>
                </div>
                <div class="flex-1">
                    <label class="block text-gray-700 mb-2">Filter by Priority:</label>
                    <select id="assignedIssuesPriorityFilter" onchange="filterAssignedIssues()" class="w-full p-2 border rounded-lg">
                        <option value="all">All Priorities</option>
                        <option value="High">High</option>
                        <option value="Medium">Medium</option>
                        <option value="Low">Low</option>
                    </select>
                </div>
            </div>

            <div class="overflow-x-auto">
                <table class="min-w-full bg-white">
                    <thead class="bg-gray-100">
                        <tr>
                            <th class="py-2 px-4 border">Issue ID</th>
                            <th class="py-2 px-4 border">Title</th>
                            <th class="py-2 px-4 border">Status</th>
                            <th class="py-2 px-4 border">Priority</th>
                            <th class="py-2 px-4 border">Due Date</th>
                            <th class="py-2 px-4 border">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="assignedIssuesTable"></tbody>
                </table>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.js"></script>
    <script>
        // Mock data store
        let mockData = {
            userIssues: [],
            assignedIssues: [],
            stats: {
                total: 0,
                open: 0,
                critical: 0,
                assigned: 0
            }
        };

        // Generate mock data
        function generateMockData() {
            const statuses = ['Open', 'In Progress', 'Resolved', 'Closed'];
            const priorities = ['High', 'Medium', 'Low'];
            const titles = [
                'Login page error',
                'Database optimization needed',
                'UI responsive issues',
                'Security vulnerability',
                'Performance optimization',
                'Bug in payment gateway',
                'User authentication issue',
                'API integration problem'
            ];

            // Generate user issues
            mockData.userIssues = Array.from({ length: 15 }, (_, i) => ({
                id: `JIRA-${1000 + i}`,
                title: titles[Math.floor(Math.random() * titles.length)],
                status: statuses[Math.floor(Math.random() * statuses.length)],
                priority: priorities[Math.floor(Math.random() * priorities.length)],
                createdDate: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
            }));

            // Generate assigned issues
            mockData.assignedIssues = Array.from({ length: 10 }, (_, i) => ({
                id: `JIRA-${2000 + i}`,
                title: titles[Math.floor(Math.random() * titles.length)],
                status: statuses[Math.floor(Math.random() * statuses.length)],
                priority: priorities[Math.floor(Math.random() * priorities.length)],
                dueDate: new Date(Date.now() + Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
            }));

            // Update statistics
            updateStats();
        }

        // Update dashboard statistics
        function updateStats() {
            mockData.stats.total = mockData.userIssues.length + mockData.assignedIssues.length;
            mockData.stats.open = [...mockData.userIssues, ...mockData.assignedIssues]
                .filter(issue => issue.status === 'Open').length;
            mockData.stats.critical = [...mockData.userIssues, ...mockData.assignedIssues]
                .filter(issue => issue.priority === 'High').length;
            mockData.stats.assigned = mockData.assignedIssues.length;

            document.getElementById('totalIssues').textContent = mockData.stats.total;
            document.getElementById('openIssues').textContent = mockData.stats.open;
            document.getElementById('criticalIssues').textContent = mockData.stats.critical;
            document.getElementById('assignedIssues').textContent = mockData.stats.assigned;
        }

        // Show loading spinner
        function showLoading() {
            document.getElementById('loading').style.display = 'block';
        }

        // Hide loading spinner
        function hideLoading() {
            document.getElementById('loading').style.display = 'none';
        }

        // Show notification
        function showNotification(message, isError = false) {
            Toastify({
                text: message,
                duration: 3000,
                gravity: "top",
                position: 'right',
                backgroundColor: isError ? "#ef4444" : "#22c55e",
            }).showToast();
        }

        // Modal handling
        function showUserIssuesModal() {
            document.getElementById('userIssuesModal').style.display = 'block';
            refreshUserIssuesTable();
        }

        function showAssignedIssuesModal() {
            document.getElementById('assignedIssuesModal').style.display = 'block';
            refreshAssignedIssuesTable();
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        // Filter user issues
        function filterUserIssues() {
            const statusFilter = document.getElementById('userIssuesStatusFilter').value;
            const searchTerm = document.getElementById('userIssuesSearch').value.toLowerCase();

            const filtered = mockData.userIssues.filter(issue => {
                const matchesStatus = statusFilter === 'all' || issue.status === statusFilter;
                const matchesSearch = issue.title.toLowerCase().includes(searchTerm) ||
                                    
issue.id.toLowerCase().includes(searchTerm);
                return matchesStatus && matchesSearch;
            });

            updateUserIssuesTable(filtered);
        }

        // Filter assigned issues
        function filterAssignedIssues() {
            const statusFilter = document.getElementById('assignedIssuesStatusFilter').value;
            const priorityFilter = document.getElementById('assignedIssuesPriorityFilter').value;

            const filtered = mockData.assignedIssues.filter(issue => {
                const matchesStatus = statusFilter === 'all' || issue.status === statusFilter;
                const matchesPriority = priorityFilter === 'all' || issue.priority === priorityFilter;
                return matchesStatus && matchesPriority;
            });

            updateAssignedIssuesTable(filtered);
        }

        // Update user issues table
        function updateUserIssuesTable(issues) {
            const tbody = document.getElementById('userIssuesTable');
            tbody.innerHTML = '';

            issues.forEach(issue => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="py-2 px-4 border">${issue.id}</td>
                    <td class="py-2 px-4 border">${issue.title}</td>
                    <td class="py-2 px-4 border">
                        <span class="px-2 py-1 rounded-full text-sm ${getStatusColor(issue.status)}">
                            ${issue.status}
                        </span>
                    </td>
                    <td class="py-2 px-4 border">
                        <span class="px-2 py-1 rounded-full text-sm ${getPriorityColor(issue.priority)}">
                            ${issue.priority}
                        </span>
                    </td>
                    <td class="py-2 px-4 border">${issue.createdDate}</td>
                    <td class="py-2 px-4 border">
                        <button onclick="updateIssueStatus('${issue.id}')" 
                                class="bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600">
                            Update Status
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        // Update assigned issues table
        function updateAssignedIssuesTable(issues) {
            const tbody = document.getElementById('assignedIssuesTable');
            tbody.innerHTML = '';

            issues.forEach(issue => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="py-2 px-4 border">${issue.id}</td>
                    <td class="py-2 px-4 border">${issue.title}</td>
                    <td class="py-2 px-4 border">
                        <span class="px-2 py-1 rounded-full text-sm ${getStatusColor(issue.status)}">
                            ${issue.status}
                        </span>
                    </td>
                    <td class="py-2 px-4 border">
                        <span class="px-2 py-1 rounded-full text-sm ${getPriorityColor(issue.priority)}">
                            ${issue.priority}
                        </span>
                    </td>
                    <td class="py-2 px-4 border">${issue.dueDate}</td>
                    <td class="py-2 px-4 border">
                        <div class="flex space-x-2">
                            <button onclick="updateIssueStatus('${issue.id}')" 
                                    class="bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600">
                                Update Status
                            </button>
                            <button onclick="updatePriority('${issue.id}')" 
                                    class="bg-yellow-500 text-white px-2 py-1 rounded hover:bg-yellow-600">
                                Update Priority
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        // Helper function to get status color classes
        function getStatusColor(status) {
            const colors = {
                'Open': 'bg-red-100 text-red-800',
                'In Progress': 'bg-yellow-100 text-yellow-800',
                'Resolved': 'bg-green-100 text-green-800',
                'Closed': 'bg-gray-100 text-gray-800'
            };
            return colors[status] || 'bg-gray-100 text-gray-800';
        }

        // Helper function to get priority color classes
        function getPriorityColor(priority) {
            const colors = {
                'High': 'bg-red-100 text-red-800',
                'Medium': 'bg-yellow-100 text-yellow-800',
                'Low': 'bg-green-100 text-green-800'
            };
            return colors[priority] || 'bg-gray-100 text-gray-800';
        }

        // Update issue status
        function updateIssueStatus(issueId) {
            showLoading();
            
            // Simulate API call
            setTimeout(() => {
                const statuses = ['Open', 'In Progress', 'Resolved', 'Closed'];
                const issue = findIssue(issueId);
                
                if (issue) {
                    const currentIndex = statuses.indexOf(issue.status);
                    const nextIndex = (currentIndex + 1) % statuses.length;
                    issue.status = statuses[nextIndex];
                    
                    refreshTables();
                    updateStats();
                    showNotification(`Status updated for issue ${issueId}`);
                }
                
                hideLoading();
            }, 500);
        }

        // Update issue priority
        function updatePriority(issueId) {
            showLoading();
            
            // Simulate API call
            setTimeout(() => {
                const priorities = ['High', 'Medium', 'Low'];
                const issue = findIssue(issueId);
                
                if (issue) {
                    const currentIndex = priorities.indexOf(issue.priority);
                    const nextIndex = (currentIndex + 1) % priorities.length;
                    issue.priority = priorities[nextIndex];
                    
                    refreshTables();
                    updateStats();
                    showNotification(`Priority updated for issue ${issueId}`);
                }
                
                hideLoading();
            }, 500);
        }

        // Find issue by ID
        function findIssue(issueId) {
            return mockData.userIssues.find(i => i.id === issueId) ||
                   mockData.assignedIssues.find(i => i.id === issueId);
        }

        // Refresh tables
        function refreshTables() {
            filterUserIssues();
            filterAssignedIssues();
        }

        // Initialize dashboard
        function initializeDashboard() {
            showLoading();
            
            // Simulate API call to fetch initial data
            setTimeout(() => {
                generateMockData();
                refreshTables();
                hideLoading();
                showNotification('Dashboard initialized successfully');
            }, 1000);
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
            }
        }

        // Initialize the dashboard when the page loads
        window.onload = initializeDashboard;
