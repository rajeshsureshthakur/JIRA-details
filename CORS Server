def do_OPTIONS(self):
        """Handle preflight CORS requests"""
        try:
            self.send_response(200)
            self.send_cors_headers()
            self.end_headers()
        except Exception as e:
            logging.error(f"Error in OPTIONS: {str(e)}")
            self.send_error(500, str(e))

    def send_cors_headers(self):
        """Send CORS headers"""
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', '*')
        self.send_header('Access-Control-Max-Age', '86400')  # 24 hours
        self.send_header('Cache-Control', 'no-store, no-cache, must-revalidate')

    def handle_jira_request(self, parsed_path):
        try:
            # Remove /api/jira prefix
            jira_path = parsed_path.path.replace('/api/jira/', '')
            query_params = parse_qs(parsed_path.query)
            
            # Log request details
            logging.info(f"Processing JIRA request for: {jira_path}")
            logging.info(f"Request headers: {dict(self.headers)}")
            logging.info(f"Query params: {query_params}")

            # Handle root endpoint
            if not jira_path:
                response_data = {
                    "status": "ok",
                    "message": "JIRA API proxy is running",
                    "endpoints": [
                        "/api/jira/myself",
                        "/api/jira/search",
                        "/api/jira/project"
                    ]
                }
                self.send_json_response(response_data)
                return

            # Construct JIRA URL
            jira_url = f"{JIRA_CONFIG['base_url']}/jira/rest/api/2/{jira_path}"
            logging.info(f"Making request to JIRA: {jira_url}")

            # Add request ID for debugging
            request_id = os.urandom(8).hex()
            logging.info(f"Request ID: {request_id}")

            try:
                # Make request to JIRA
                if query_params:
                    formatted_params = {k: v[0] for k, v in query_params.items()}
                    response = requests.get(
                        jira_url, 
                        headers=self.jira_headers,
                        params=formatted_params,
                        verify=JIRA_CONFIG['verify_ssl']
                    )
                else:
                    response = requests.get(
                        jira_url, 
                        headers=self.jira_headers,
                        verify=JIRA_CONFIG['verify_ssl']
                    )

                logging.info(f"JIRA response status [{request_id}]: {response.status_code}")
                
                if response.ok:
                    # Send successful response
                    self.send_json_response(response.json())
                else:
                    # Send error response
                    error_data = {
                        "error": "JIRA API Error",
                        "status": response.status_code,
                        "message": response.text,
                        "request_id": request_id
                    }
                    logging.error(f"JIRA error response [{request_id}]: {response.text}")
                    self.send_json_response(error_data, status_code=response.status_code)

            except requests.exceptions.RequestException as e:
                logging.error(f"Request error [{request_id}]: {str(e)}")
                self.send_json_response({
                    "error": "Request Failed",
                    "message": str(e),
                    "request_id": request_id
                }, status_code=500)

        except Exception as e:
            logging.error(f"Server error: {str(e)}\n{traceback.format_exc()}")
            self.send_json_response({
                "error": "Server Error",
                "message": str(e)
            }, status_code=500)

    def send_json_response(self, data, status_code=200):
        """Send JSON response with proper headers"""
        try:
            # Convert data to JSON
            response_data = json.dumps(data, indent=2)
            
            # Send response
            self.send_response(status_code)
            self.send_cors_headers()
            self.send_header('Content-Type', 'application/json')
            self.send_header('Content-Length', str(len(response_data.encode())))
            self.end_headers()
            
            # Write response body
            self.wfile.write(response_data.encode())
            
        except Exception as e:
            logging.error(f"Error sending response: {str(e)}")
            self.send_error(500, f"Error sending response: {str(e)}")
